/**
 * The time complexity of the solution is O(n log n) because we are sorting the citations 
 * array in descending order using Arrays.sort() which has a time complexity of O(n log n). 
 * Then, we are iterating through the sorted array once to calculate the h-index, which has a time complexity of O(n).
 * The space complexity of the solution is O(1) because we are not using any extra space that grows with the input size.
 */
package com.array;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Queue;

public class Hello {
	public static void main(String args[]) 
	 { 
		 Integer[] citations = {1};
		 Solution s = new Solution();
		 Arrays.sort(citations, Collections.reverseOrder());
		 System.out.println("Highest profit is = "+s.hIndex(citations));
	 } 
}
class Solution {
    public int hIndex(Integer[] citations) {
    	int hIndex = 0;
    	if(citations.length==1)
    		return citations[0];
    	
    	for(int i=0;i<citations.length-1;i++) {
    		System.out.println(hIndex+" "+citations[i]);
    		if(citations[i]>=hIndex+1 && citations[i]!=citations[i+1])
    			hIndex++;
    	}
        return hIndex;
    }
}

